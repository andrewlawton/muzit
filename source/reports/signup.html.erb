---
title: Reports - Muzit
layout: sign-up
bodyClass: sign-in reports
---

<script src="https://js.stripe.com/v3/"></script>
<style>
/**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */
.StripeElement {
  padding: .5rem .75rem;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  background-color: white;
  width: 100%;
}

.StripeElement--invalid {
  border-color: #fa755a;
}

.StripeElement--webkit-autofill {
  background-color: #fefde5 !important;
}

#card-errors {
  color: #ff4136;
  font-size: 13px;
  margin-top: 0.25rem;
}
</style>

<div class="container">
  <h1 class="my-4 text-center">Buy a Report</h1>
  <div class="row">
    <div class="col-md-6">
      <h2>
        It's all about the data
      </h2>
      <p>
        Muzitâ€™s big data analytics platform identifies the explicit entertainment preferences and geographical locations of millions of P2P fans of music, movies, television and other digital media. By understanding these preferences and the valuable meta data associated with each download, copyright owners and media professionals can now truly know what content drives millions of consumers around the world.
      </p>
      <%= image_tag("report-example.png", class: "img-fluid border mb-3", alt: "Muzit report example") %>

      <h3>
        Pricing
      </h3>
      <p>
        For $1000.00 you will have access for one month to download each of the folowing reports. Email <a href="mailto:info@muzit?subject=Reports Download">info@muzit</a> for more information.
      </p>
      <strong>Includes:</strong>
      <ul>
        <li>Top 10 artists in the Worldwide</li>
        <li>Top 10 artists in the United States</li>
        <li>Top 10 artists by downloads</li>
      </ul>
    </div>
    <div class="col-md-6">
      <div class="form-container">
        <p>
          Simply complete this form to download your reports.
        </p>
        <form class="simple_form edit_user" novalidate="" action="../reports/download.html" accept-charset="UTF-8" method="get">
          <fieldset>
            <div class="form-group user_first_name">
              <label class="form-control-label required" for="full_name">
                Full name
              </label>
              <input class="form-control" type="text" value="" name="user[first_name]" id="full_name" required>
              <div class="invalid-feedback">
                Enter your full name
              </div>
            </div>
            <div class="form-group">
              <label class="form-control-label required" for="user_email">
                Email
              </label>
              <input class="form-control" type="email" value="" name="user[email]" id="user_email" required>
              <div class="invalid-feedback">
                Enter a valid email address
              </div>
            </div>
            <div class="form-group">
              <label class="required" for="card-element">
                Credit or debit card
              </label>
              <div id="card-element">
                <!-- A Stripe Element will be inserted here. -->
              </div>
              <!-- Used to display form errors. -->
              <div id="card-errors" role="alert"></div>
              <script>
              // Create a Stripe client.
              var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');

              // Create an instance of Elements.
              var elements = stripe.elements();

              // Custom styling can be passed to options when creating an Element.
              // (Note that this demo uses a wider set of styles than the guide below.)
              var style = {
                base: {
                  color: '#32325d',
                  //fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                  fontSmoothing: 'antialiased',
                  fontSize: '16px',
                  '::placeholder': {
                    color: '#aab7c4'
                  }
                },
                invalid: {
                  color: '#ff4136',
                  iconColor: '#ff4136'
                }
              };

              // Create an instance of the card Element.
              var card = elements.create('card', {style: style});

              // Add an instance of the card Element into the `card-element` <div>.
              card.mount('#card-element');

              // Handle real-time validation errors from the card Element.
              card.addEventListener('change', function(event) {
                var displayError = document.getElementById('card-errors');
                if (event.error) {
                  displayError.textContent = event.error.message;
                } else {
                  displayError.textContent = '';
                }
              });

              // Handle form submission.
              var form = document.getElementById('payment-form');
              form.addEventListener('submit', function(event) {
                event.preventDefault();

                stripe.createToken(card).then(function(result) {
                  if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                  } else {
                    // Send the token to your server.
                    stripeTokenHandler(result.token);
                  }
                });
              });

              // Submit the form with the token ID.
              function stripeTokenHandler(token) {
                // Insert the token ID into the form so it gets submitted to the server
                var form = document.getElementById('payment-form');
                var hiddenInput = document.createElement('input');
                hiddenInput.setAttribute('type', 'hidden');
                hiddenInput.setAttribute('name', 'stripeToken');
                hiddenInput.setAttribute('value', token.id);
                form.appendChild(hiddenInput);

                // Submit the form
                form.submit();
              }

              </script>
            </div>
            <div class="form-group required">
              <label class="form-control-label email required" for="industry">
                Industry
              </label>
              <select class="custom-select" id="industry" required>
                <option selected>Select industry</option>
                <option value="1">Music</option>
                <option value="2">Film</option>
                <option value="3">Television</option>
                <option value="4">Publishing</option>
                <option value="5">Software</option>
              </select>
            </div>
            <div class="form-group required">
              <label class="form-control-label email required" for="industry">
                Country/Region of interest
              </label>
              <select class="custom-select" id="industry" required>
                <option selected>Select country</option>
                <option value="1">United States</option>
              </select>
            </div>
            <div class="action">
              <input type="submit" name="commit" value="Save" class="btn btn-primary">
              <a href="#" class="text-center d-lg-inline">Cancel</a>
            </div>
          </fieldset>
        </form>
      </div>
      <!-- // end form-container -->
    </div>
    <!-- // end column -->
  </div>
  <!-- // end row -->
</div>
<!-- // end container -->

<script>
// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();
</script>
