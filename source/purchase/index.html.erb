---
title: Purchase List - Muzit
bodyClass:
---
<script src="https://js.stripe.com/v3/"></script>
<style>
  /**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */
.StripeElement {
  padding: .5rem .75rem;
  border: 1px solid #ced4da;
  border-radius: 0.25rem;
  background-color: white;
  width: 100%;
}

.StripeElement--invalid {
  border-color: #fa755a;
}

.StripeElement--webkit-autofill {
  background-color: #fefde5 !important;
}

#card-errors {
  color: #ff4136;
  font-size: 13px;
  margin-top: 0.25rem;
}
</style>
<div class="container-fluid">
  <h1 class="my-4 text-center">
    Purchase List
  </h1>
  <div class="row justify-content-center">
    <div class="alert alert-info credits-status">
      You have <span class="badge badge-pill badge-success">77,017</span> IP credits remaining.
    </div>
  </div>
  <div class="d-flex justify-content-center">
    <div class="card">
      <div class="card-body">
        <div class="purchase-details">
          <div class="table-responsive-sm gradient-right" id="scroll-gradient">
            <table class="table">
              <tbody>
                <tr>
                  <td colspan="4">Bowie - everyone</td>
                </tr>
                <tr>
                  <th>&nbsp;</th>
                  <th>IP Addresses</th>
                  <th>Cost per IP</th>
                  <th>Amount</th>
                </tr>
                <tr>
                  <th>&nbsp;</th>
                  <td>117,084</td>
                  <td>$0.03</td>
                  <td>$3,512.52</td>
                </tr>
                <tr id="prepurchased" style="display: none;">
                  <th>Pre-purchased</th>
                  <td>77,017</td>
                  <td>-&nbsp;$0.03</td>
                  <td>-&nbsp;$2.310.51</td>
                </tr>
                <tr>
                  <th colspan="3">Amount Due</th>
                  <td>$3,512.52</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <div class="alert alert-info" style="background-color: #f8f9fa; font-size: 14px;">
          <p>
            <strong>Would you like to use your existing IP credits towards the purchase of this list?</strong>
          </p>
          <form>
            <div class="custom-control custom-checkbox mr-sm-2">
              <input type="checkbox" class="custom-control-input" id="useIPCredits">
              <label class="custom-control-label" for="useIPCredits">Use My IP Credits</label>
            </div>
          </form>
          <script>
            document.getElementById('useIPCredits').onchange = function() {
              document.getElementById('prepurchased').style.display = this.checked ? 'table-row' : 'none';
            };
          </script>
        </div>
        <form action="confirmation.html" method="get" class="form needs-validation" novalidate>
          <fieldset>
            <div class="form-group">
              <label class="required" for="card-element">
                Credit or debit card
              </label>
              <div id="card-element">
                <!-- A Stripe Element will be inserted here. -->
              </div>
              <!-- Used to display form errors. -->
              <div id="card-errors" role="alert"></div>
              <script>
              // Create a Stripe client.
              var stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');

              // Create an instance of Elements.
              var elements = stripe.elements();

              // Custom styling can be passed to options when creating an Element.
              // (Note that this demo uses a wider set of styles than the guide below.)
              var style = {
                base: {
                  color: '#32325d',
                  //fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                  fontSmoothing: 'antialiased',
                  fontSize: '16px',
                  '::placeholder': {
                    color: '#aab7c4'
                  }
                },
                invalid: {
                  color: '#ff4136',
                  iconColor: '#ff4136'
                }
              };

              // Create an instance of the card Element.
              var card = elements.create('card', { style: style });

              // Add an instance of the card Element into the `card-element` <div>.
              card.mount('#card-element');

              // Handle real-time validation errors from the card Element.
              card.addEventListener('change', function(event) {
                var displayError = document.getElementById('card-errors');
                if (event.error) {
                  displayError.textContent = event.error.message;
                } else {
                  displayError.textContent = '';
                }
              });

              // Handle form submission.
              var form = document.getElementById('payment-form');
              form.addEventListener('submit', function(event) {
                event.preventDefault();

                stripe.createToken(card).then(function(result) {
                  if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                  } else {
                    // Send the token to your server.
                    stripeTokenHandler(result.token);
                  }
                });
              });

              // Submit the form with the token ID.
              function stripeTokenHandler(token) {
                // Insert the token ID into the form so it gets submitted to the server
                var form = document.getElementById('payment-form');
                var hiddenInput = document.createElement('input');
                hiddenInput.setAttribute('type', 'hidden');
                hiddenInput.setAttribute('name', 'stripeToken');
                hiddenInput.setAttribute('value', token.id);
                form.appendChild(hiddenInput);

                // Submit the form
                form.submit();
              }
              </script>
            </div>
            <!-- // end form-group -->
            <!--
            <div class="form-group">
              <label for="coupon">Promo Code</label>
              <input class="form-control" type="text" name="coupon" id="coupon" placeholder="Enter promo code">
              <div class="invalid-feedback"></div>
            </div>
            -->
            <div class="action">
              <%= submit_tag "Purchase", class: 'btn btn-primary' %>
              <%= link_to 'Cancel', '../index.html' %>
            </div>
            <!-- // end action -->
          </fieldset>
        </form>
      </div>
      <!-- // end card-body -->
    </div>
    <!-- // end card -->
  </div>
  <!-- // end justify-card-center -->
</div>
<!-- // end container -->
<script>
// Example starter JavaScript for disabling form submissions if there are invalid fields

(function() {
  'use strict';
  window.addEventListener('load', function() {
    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.getElementsByClassName('needs-validation');
    // Loop over them and prevent submission
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();
</script>